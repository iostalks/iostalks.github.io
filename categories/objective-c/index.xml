<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Objective-C on Small Fly</title>
    <link>/categories/objective-c/</link>
    <description>Recent content in Objective-C on Small Fly</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Smallfly</copyright>
    <lastBuildDate>Fri, 28 Aug 2020 10:51:52 +0800</lastBuildDate>
    
	<atom:link href="/categories/objective-c/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Objective-C Runtime 初始化全过程</title>
      <link>/post/objc-runtime/</link>
      <pubDate>Fri, 28 Aug 2020 10:51:52 +0800</pubDate>
      
      <guid>/post/objc-runtime/</guid>
      <description>&lt;p&gt;Runtime 是 Objective-C 实现动态化的基础，它的初始化过程分为三步：加载类，格式化类，调用 load。&lt;/p&gt;
&lt;p&gt;这里有一份笔者加过注释的可运行 Runtime 源码：&lt;a href=&#34;https://github.com/iostalks/objc-runtime&#34;&gt;objc-runtime&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;加载类&#34;&gt;加载类&lt;/h2&gt;
&lt;p&gt;Runtime 初始化的入口为 objc-os.mm 中的 _objc_init 函数。&lt;/p&gt;
&lt;p&gt;首先是初始化运行环境所需要的资源，随后调用 _dyld_objc_notify_register 注册三个回调函数。&lt;/p&gt;
&lt;p&gt;值得关注的是 map_images 和 load_images 这两个函数。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>再读 《Objective-C 高级编程》内存管理篇</title>
      <link>/post/objc-memory-manage/</link>
      <pubDate>Sun, 31 May 2020 00:02:44 +0800</pubDate>
      
      <guid>/post/objc-memory-manage/</guid>
      <description>&lt;p&gt;以前，每隔一段时间会读一下《Objective-C 高级编程》这本书，每次读都有一些新的收获，算下来至少也有两三遍。&lt;/p&gt;
&lt;p&gt;原本认为对 iOS 的内存管理机制，已经理解的很透彻了，但最近的一些经历，意识到自己的理解，还很肤浅，也不够全面。&lt;/p&gt;
&lt;p&gt;全民 ARC 时代，很少需要程序员主动管理内存，无外乎是 delegate/block 之类的循环引用，以及更隐蔽一些的多对象引用环。&lt;/p&gt;
&lt;p&gt;这本书的第一章比较全面的介绍 iOS 中内存管理相关的知识。虽然部分内容有些过时，但依然不影响我们理解内存管理的工作原理。&lt;/p&gt;
&lt;p&gt;第一章主要分为三个模块，分别介绍了引用计数、ARC 以及 ARC 的实现。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>