<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Small Fly</title>
    <link>iostalks.github.io/</link>
    <description>Recent content on Small Fly</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Smallfly</copyright>
    <lastBuildDate>Tue, 14 Apr 2020 08:14:53 +0800</lastBuildDate>
    
	<atom:link href="iostalks.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>HTTP 客户端缓存的实现原理</title>
      <link>iostalks.github.io/post/http-cache/</link>
      <pubDate>Tue, 14 Apr 2020 08:14:53 +0800</pubDate>
      
      <guid>iostalks.github.io/post/http-cache/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;HTTP 是一种同步的应用层协议，客户端在发出请求后，需要等待服务端的响应，在这个过程中，请求是阻塞的。&lt;/p&gt;
&lt;p&gt;在端上响应时间是应用程序关键的性能指标，因此 HTTP 的响应速度，对提升应用程序的性能非常关键。&lt;/p&gt;
&lt;p&gt;缓存技术，是提高性能的一大利器。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>一文读懂 CORS</title>
      <link>iostalks.github.io/post/kills-cors-doubt/</link>
      <pubDate>Tue, 17 Mar 2020 10:01:57 +0800</pubDate>
      
      <guid>iostalks.github.io/post/kills-cors-doubt/</guid>
      <description>&lt;p&gt;前端开发经常会遇到跨域问题，通过搜索基本都能解决，或者直接交给后端处理，只要浏览器不要再报下面的错误就行。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;XMLHttpRequest cannot load &lt;a href=&#34;https://api.example.com&#34;&gt;https://api.example.com&lt;/a&gt;. No &amp;lsquo;Access-Control-Allow-Origin&amp;rsquo; header is present on the requested resource. Origin &amp;lsquo;http://localhost:8100&amp;rsquo; is therefore not allowed access.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在解决这个问题后，我还是感觉云里雾里，阅读了很多资料，最终认为自己“理解”了，以下是我的理解内容：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JavaScript 对象转值的原理</title>
      <link>iostalks.github.io/post/js-object-toprimitive/</link>
      <pubDate>Sun, 09 Feb 2020 14:45:39 +0800</pubDate>
      
      <guid>iostalks.github.io/post/js-object-toprimitive/</guid>
      <description>&lt;p&gt;JavaScript 作为一门弱类型的语言，在类型转换上非常的灵活。它在提供便利的同时，也带来了不少困惑。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[] + []&lt;/code&gt; , &lt;code&gt;[] + {}&lt;/code&gt; , &lt;code&gt;${obj}&lt;/code&gt; ，这些表达式计算结果是什么，又是如何得出这个结果的？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JavaScript 糟粕集</title>
      <link>iostalks.github.io/post/js-drawback/</link>
      <pubDate>Fri, 10 Jan 2020 17:24:00 +0800</pubDate>
      
      <guid>iostalks.github.io/post/js-drawback/</guid>
      <description>&lt;p&gt;JavaScript 是 Brendan Eich 花了十天开发出来的，如此短暂的时间开发一门语言，难免会有考虑不周的地方。&lt;/p&gt;
&lt;p&gt;虽然 EAMCScript 规范不断地更新迭代，然而很多浏览器可能还在使用老的规范，原本设计不合理的功能，已经在线上运行。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>